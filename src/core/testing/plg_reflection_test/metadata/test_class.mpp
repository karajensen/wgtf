#include "../test_class.hpp"
#include "core_reflection/reflection_macros.hpp"
#include "core_reflection/function_property.hpp"
#include "core_reflection/metadata/meta_types.hpp"
#include "core_reflection/utilities/reflection_function_utilities.hpp"

#include <utility>

namespace wgt
{
BEGIN_EXPOSE(TestBase, MetaNone())
EXPOSE("Name", baseName_, MetaNone())
END_EXPOSE()
BEGIN_EXPOSE(TestClass, TestBase, MetaNone())
EXPOSE("Name", name_, MetaGroup(L"TestClassGroupName") + MetaDisplayName(L"TestClassDisplayName"))
EXPOSE("String", string_, MetaNone())
EXPOSE("Strings", strings_, MetaNone())
EXPOSE("StringFunc", getString, setString, MetaNone())
EXPOSE_CALLABLE("StringLambda", [](SelfType* object) { return object->string_; },
                [](SelfType* object, std::string value) { object->string_ = std::move(value); }, MetaNone())
EXPOSE_CALLABLE("StringsLambda", [](SelfType* object) -> std::vector<std::string>& { return object->strings_; },
                [](SelfType* object, std::vector<std::string> value) { object->strings_ = std::move(value); },
                MetaNone())
EXPOSE("InnerClass", innerClass_, MetaNone())
END_EXPOSE()
BEGIN_EXPOSE(TestClass::InnerClass, MetaNone())
EXPOSE("InnerName", innerName_, MetaNone())
END_EXPOSE()
} // end namespace wgt
